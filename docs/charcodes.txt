


Citrine character codes:

RECOMMENDED

‚õè 26CF pick/hammer  me           (perform own action, play symbol), ALT+PERIOD
‚öø 26BF key          my           (own property, protected) ALT+K
‚òû 261E hand         var          (declare variable) ALT+EQUAL
‚Üê 2190 left arrow    new and push (create new array and push value)
‚Ü≤ 21B2 return arrow  return       (returns from block of code) ALT+COMMA
‚Üµ 21B5 enter/new line ALT+N
‚ù≤ 2772 bracket open  (string interpolation start) ALT+[
‚ù≥ 2773 bracket close (string interpolation stop) ALT+]
‚Äâ  2009 thin space ALT+SEMICOLON

OPTIONAL

‚â§ 2264 less or equal  (ALT+L or ALT+SHIFT<)
‚â• 2265 greater or equal (ALT+M or ALT+SHIFT+>)
‚â† 2260 (ALT+U)
‚áø 21FF tab (ALT+SHIFT+T)
‚úé 270E pencil        Pen          (Pen object)  (ALT+')
‚è∞ 23F0 clock         Clock         (Clock object) (ALT+|)
‚öÑ 2684 die           Dice          (Dice object) (ALT+?)
üíª 1F4BB personal computer  Program (Program object) (ALT+@)


Why does Citrine use icons?

1. It's crazy that we only use about 1% of all unicode glyphs to express complex programming logic
2. Once you have setup your key bindings typing icons significantly reduces typing effort and program size
3. Using icons for keywords like var, me and my makes Citrine less tied to the English language 
(i.e. it's possible to write entire program files in your native language)
4. Using unicode characters removes the need for escape characters for string interpolation, tab and newline characters
5. Using thin space unicode glyphs one can form more natural looking messages (no need for camelCase)
6. Using icons can make programming more accessible






