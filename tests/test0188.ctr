

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

{ :i ✎ write: i. } * 4.
✎ brk.
{ :i ✎ write: (4 - i). } * 4.
✎ brk.
( 1 > 2 ) false: { ✎ write: 'BLOCK 1', brk. }.
( 2 > 1 ) true:  { ✎ write: 'BLOCK 2', brk. }.

☞ i := 0.
{ ↲( i < 3). } true: { ✎ write: i. i add: 1. }.
✎ brk.

i := 3.
{ ↲( i > 0). } true: { ✎ write: i. i := i - 1. }.
✎ brk.


Program sweep.

usedMemory1 := Program allocated.


{ :i ✎ write: i. } * 4.
✎ brk.
{ :i ✎ write: (4 - i). } * 4.
✎ brk.
( 1 > 2 ) false: { ✎ write: 'BLOCK 1', brk. }.
( 2 > 1 ) true:  { ✎ write: 'BLOCK 2', brk. }.

i := 0.
{ ↲( i < 3). } true: { ✎ write: i. i add: 1. }.
✎ brk.

i := 3.
{ ↲( i > 0). } true: { ✎ write: i. i := i - 1. }.
✎ brk.



Program sweep.
usedMemory2 := Program allocated.


{ :i ✎ write: i. } * 4.
✎ brk.
{ :i ✎ write: (4 - i). } * 4.
✎ brk.
( 1 > 2 ) false: { ✎ write: 'BLOCK 1', brk. }.
( 2 > 1 ) true:  { ✎ write: 'BLOCK 2', brk. }.

i := 0.
{ ↲( i < 3). } true: { ✎ write: i. i add: 1. }.
✎ brk.

i := 3.
{ ↲( i > 0). } true: { ✎ write: i. i := i - 1. }.
✎ brk.

Program sweep.
usedMemory3 := Program allocated.



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: 'No memory leaks here'.
}, false: {
	✎ write: 'Leaking memory...'.
}.
