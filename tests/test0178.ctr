

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

☞ txt := 'Word Salad'.
Pen write: 'last index of ord = ' + ( txt last: 'ord' ), brk.
Pen write: 'index of ord = ' + ( txt find: 'ord' ), brk.
Pen write: 'index of ad = ' + ( txt find: 'ad' ), brk.
Pen write: 'last index of W = ' + ( txt last: 'W' ), brk.
Pen write: 'last index of d = ' + ( txt last: 'd' ), brk.
Pen write: 'txt equals Word Salad = ' + ( txt = 'Word Salad' ), brk.
Pen write: 'txt equals Ceasar Salad = ' + ( txt = 'Ceasar Salad' ), brk.
Pen write: 'txt does not equal Word Salad = ' + ( txt !=: 'Word Salad' ), brk.
Pen write: 'txt does not equal Ceasar Salad = ' + ( txt !=: 'Ceasar Salad' ), brk.

Program sweep.

usedMemory1 := Program allocated.


txt := 'Word Salad'.
Pen write: 'last index of ord = ' + ( txt last: 'ord' ), brk.
Pen write: 'index of ord = ' + ( txt find: 'ord' ), brk.
Pen write: 'index of ad = ' + ( txt find: 'ad' ), brk.
Pen write: 'last index of W = ' + ( txt last: 'W' ), brk.
Pen write: 'last index of d = ' + ( txt last: 'd' ), brk.
Pen write: 'txt equals Word Salad = ' + ( txt = 'Word Salad' ), brk.
Pen write: 'txt equals Ceasar Salad = ' + ( txt = 'Ceasar Salad' ), brk.
Pen write: 'txt does not equal Word Salad = ' + ( txt !=: 'Word Salad' ), brk.
Pen write: 'txt does not equal Ceasar Salad = ' + ( txt !=: 'Ceasar Salad' ), brk.

Program sweep.
usedMemory2 := Program allocated.


txt := 'Word Salad'.
Pen write: 'last index of ord = ' + ( txt last: 'ord' ), brk.
Pen write: 'index of ord = ' + ( txt find: 'ord' ), brk.
Pen write: 'index of ad = ' + ( txt find: 'ad' ), brk.
Pen write: 'last index of W = ' + ( txt last: 'W' ), brk.
Pen write: 'last index of d = ' + ( txt last: 'd' ), brk.
Pen write: 'txt equals Word Salad = ' + ( txt = 'Word Salad' ), brk.
Pen write: 'txt equals Ceasar Salad = ' + ( txt = 'Ceasar Salad' ), brk.
Pen write: 'txt does not equal Word Salad = ' + ( txt !=: 'Word Salad' ), brk.
Pen write: 'txt does not equal Ceasar Salad = ' + ( txt !=: 'Ceasar Salad' ), brk.

Program sweep.
usedMemory3 := Program allocated.



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Pen write: 'No memory leaks here'.
}, false: {
	Pen write: 'Leaking memory...'.
}.
