☞ Slurp := Object new.
Slurp on: 'new' do: {
	⚿ str := ''.
}.
Slurp learn: 'nieuw' means: 'new'.
Slurp on: 'respondTo:' do: { :blah
		(⚿ str !=: '') true: {
			⚿ str append: ' '.
		}.
		⚿ str append: blah.
}.
Slurp on: 'respondTo:and:' do: { :blah :blahah
		(⚿ str !=: '') true: {
			⚿ str append: ' '.
		}.
		(blah length > 1) true: {
			⚿ str append: (blah from: 0 length: (blah length - 1)).
		}, else: {
			⚿ str append: blah.
		}.
		⚿ str append: ' '.
		⚿ str append: blahah.
}.
Slurp on: 'obtain' do: {
	☞ buffer := ⚿ str.
	⚿ str := ''.
	↲ buffer.
}.

☞ os := (💻 shell: 'uname').
☞ file := Nil.

((os find: 'Linux') > -1) true: {
	file := '/var/log/syslog'.
}.

((os find: 'OpenBSD') > -1) true: {
	file := '/var/log/messages'.
}.

(file isNil) true: {
	✎ write: 'Unable to determine location of system log for test', brk.
	💻 exit.
}.

☞ key := '--Citrine-->0'.
💻 log: key.
☞ str := (💻 shell: (Slurp new tail: file, obtain)).
((str find: key) > -1) true: {
	✎ write: 'OK'.
}.

key := '--Citrine-->1'.
💻 warning: key.
str := (💻 shell: (Slurp new tail: file, obtain)).
((str find: key) > -1) true: {
	✎ write: 'OK'.
}.

key := '--Citrine-->2'.
💻 error: key.
str := (💻 shell: (Slurp new tail: file, obtain)).
((str find: key) > -1) true: {
	✎ write: 'OK'.
}.

key := '--Citrine-->3'.
💻 alert: key.
str := (💻 shell: (Slurp new tail: file, obtain)).
((str find: key) > -1) true: {
	✎ write: 'OK'.
}.
