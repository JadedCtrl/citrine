

usedMemory1 := 0.
usedMemory2 := 0.
usedMemory3 := 0.
usedMemory4 := 0.

Broom mode: 0.

Number on: 'add:' do: { :x
	me +=: x.
}.

Number on: 'subtract:' do: { :x
	me -=: x.
}.

Number on: 'multiplyBy:' do: { :x
	me *=: x.
}.

Number on: 'divideBy:' do: { :x
	me /=: x.
}.


a := 1.
a := a + 1.       
a add: 3.         
a := a - 1.       
a subtract: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 toPowerOf: 8).  
a := a + (2 toPowerOf: -1). 
a := a + (49 sqrt).   
a add: (0 max: 1).          
a add: (2 min: 3).          
Pen write: a.

Broom sweep.

usedMemory1 := Broom keptAlloc.


a := 1.
a := a + 1.       
a add: 3.         
a := a - 1.       
a subtract: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 toPowerOf: 8).  
a := a + (2 toPowerOf: -1). 
a := a + (49 sqrt).   
a add: (0 max: 1).          
a add: (2 min: 3).          
Pen write: a.

Broom sweep.
usedMemory2 := Broom keptAlloc.


a := 1.
a := a + 1.       
a add: 3.         
a := a - 1.       
a subtract: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 toPowerOf: 8).  
a := a + (2 toPowerOf: -1). 
a := a + (49 sqrt).   
a add: (0 max: 1).          
a add: (2 min: 3).          
Pen write: a.

Broom sweep.
usedMemory3 := Broom keptAlloc.



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) ifTrue: {
	Pen write: 'No memory leaks here'.
}, ifFalse: {
	Pen write: 'Leaking memory...'.
}.
