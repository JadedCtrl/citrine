

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

Number on: 'addNum:' do: { :x
	⛏ add: x.
}.

Number on: 'subtractNum:' do: { :x
	⛏ subtract: x.
}.

Number on: 'multiplyBy:' do: { :x
	⛏ multiply: x.
}.

Number on: 'divideBy:' do: { :x
	⛏ divider: x.
}.


☞ a := 1.
a := a + 1.
a addNum: 3.         
a := a - 1.       
a subtractNum: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 power: 8).  
a := a + (2 power: -1). 
a := a + (49 sqrt).   
a addNum: (0 max: 1).          
a addNum: (2 min: 3).          
✎ write: a.

Program sweep.

usedMemory1 := (Program memory @ 0).


a := 1.
a := a + 1.       
a addNum: 3.         
a := a - 1.       
a subtractNum: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 power: 8).  
a := a + (2 power: -1). 
a := a + (49 sqrt).   
a addNum: (0 max: 1).          
a addNum: (2 min: 3).          
✎ write: a.

Program sweep.
usedMemory2 := (Program memory @ 0).


a := 1.
a := a + 1.       
a addNum: 3.         
a := a - 1.       
a subtractNum: -0.5. 
a := a * 2.       
a divideBy: 3.    
a := a / 0.1.     
a := a - -1.      
a multiplyBy: 0.5.
a := a + (2 power: 8).  
a := a + (2 power: -1). 
a := a + (49 sqrt).   
a addNum: (0 max: 1).          
a addNum: (2 min: 3).          
✎ write: a.

Program sweep.
usedMemory3 := (Program memory @ 0).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: 'No memory leaks here'.
}, false: {
	✎ write: 'Leaking memory...'.
}.
