

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

☞ txt := 'Word Salad'.
✎ write: 'Text Length: ' + txt length, brk.
✎ write: 'Text Length in bytes: ' + txt bytes, brk.
✎ write: 'Character at 2:' + ( txt @ 2 ), brk.
✎ write: 'Byte at 2:' + ( txt byte: 2 ), brk.
✎ write: ( txt find: 'S' ), brk.

Program sweep.

usedMemory1 := (Program memory @ 0).


txt := 'Word Salad'.
✎ write: 'Text Length: ' + txt length, brk.
✎ write: 'Text Length in bytes: ' + txt bytes, brk.
✎ write: 'Character at 2:' + ( txt @ 2 ), brk.
✎ write: 'Byte at 2:' + ( txt byte: 2 ), brk.
✎ write: ( txt find: 'S' ), brk.

Program sweep.
usedMemory2 := (Program memory @ 0).


txt := 'Word Salad'.
✎ write: 'Text Length: ' + txt length, brk.
✎ write: 'Text Length in bytes: ' + txt bytes, brk.
✎ write: 'Character at 2:' + ( txt @ 2 ), brk.
✎ write: 'Byte at 2:' + ( txt byte: 2 ), brk.
✎ write: ( txt find: 'S' ), brk.

Program sweep.
usedMemory3 := (Program memory @ 0).



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: 'No memory leaks here'.
}, false: {
	✎ write: 'Leaking memory...'.
}.
