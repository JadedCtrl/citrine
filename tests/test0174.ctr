'SINGLE_LANGUAGE'.


☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

☞ palette := Map new.
palette 
	put: '#F00' at: 'red',
	put: '#0F0' at: 'green',
	put: '#00F' at: 'blue'.
Pen write: 'number of RGB codes in palette: ' + ( palette count ), brk.
Pen write: 'RGB code of green is: ' + ( palette @ 'green' ), brk.
☞ colors := ''.
( palette each: { :name :code
		colors := colors + ( name + ':' + code ).
} ).
Pen write: 'All colors in palette: ' + colors, brk.

Program sweep.
usedMemory1 := Program allocated.


palette := Map new.
palette 
	put: '#F00' at: 'red',
	put: '#0F0' at: 'green',
	put: '#00F' at: 'blue'.
Pen write: 'number of RGB codes in palette: ' + ( palette count ), brk.
Pen write: 'RGB code of green is: ' + ( palette @ 'green' ), brk.
colors := ''.
( palette each: { :name :code
		colors := colors + ( name + ':' + code ).
} ).
Pen write: 'All colors in palette: ' + colors, brk.

Program sweep.
usedMemory2 := Program allocated.

palette := Map new.
palette 
	put: '#F00' at: 'red',
	put: '#0F0' at: 'green',
	put: '#00F' at: 'blue'.
Pen write: 'number of RGB codes in palette: ' + ( palette count ), brk.
Pen write: 'RGB code of green is: ' + ( palette @ 'green' ), brk.
colors := ''.
( palette each: { :name :code
		colors := colors + ( name + ':' + code ).
} ).
Pen write: 'All colors in palette: ' + colors, brk.


Program sweep.
usedMemory3 := Program allocated.



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Pen write: 'No memory leaks here'.
}, false: {
	Pen write: 'Leaking memory...'.
}.
