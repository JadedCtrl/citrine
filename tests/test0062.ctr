#Test error handling of internal errors.
o := Object new.
o on: 'hello' do: {\}.
{\ o on: 2 do: 3.} catch: { e | Pen write: e, brk. }, run.
{\ o on: 'test' do: 3.} catch: { e | Pen write: e, brk. }, run.
{\ o on: 'hello' do: {\}.} catch: { e | Pen write: e, brk. }, run. #allowed
{\ o override: 2 do: 3.} catch: { e | Pen write: e, brk. }, run.
{\ o override: 'test' do: 3.} catch: { e | Pen write: e, brk. }, run.
{\ o override: 'test' do: {\}.} catch: { e | Pen write: e, brk. }, run.
{\ o basedOn: o. } catch: { e | Pen write: e, brk. }, run.
{\ z := 4 / 0. } catch: { e | Pen write: e, brk. }, run. 
{\ o basedOn: Nil. } catch: { e | Pen write: e, brk. }, run. #allowed
{\ (True && Nil) ifTrue: {\ Pen write: 'X'.}. } catch: { e | Pen write: e, brk. }, run. #allowed
{\ ('' || 0) ifTrue: {\ Pen write: 'X'.}. } catch: { e | Pen write: e, brk. }, run. #allowed
{\ (1 < '2') ifTrue: {\ Pen write: 'OK'. }. } catch: { e | Pen write: e, brk. }, run. #allowed, cast
{\ (1 < '2.0') ifTrue: {\ Pen write: 'OK'. }. } catch: { e | Pen write: e, brk. }, run. #allowed, cast
{\ (1 < 'x2.0') ifTrue: {\ Pen write: 'NO!'. }. } catch: { e | Pen write: e, brk. }, run. #allowed, cast
{\ Pen write: ('hello OK there' from: '6' to: '8'). } run. #allowed, cast
