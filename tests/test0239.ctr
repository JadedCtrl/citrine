'SINGLE_LANGUAGE'.


☞ a := True.



a on: 'toString' do: {
	var answer := Nil.
	( me = True ) ifTrue: {
		answer := 'Yep'.
	}, else: {
		answer := 'Nope'.
	}.
	^ answer.
}.

a on: 'toNumber' do: {
	var answer := Nil.
	( me = True ) ifTrue: {
		answer := 10.
	}, else: {
		answer := 20.
	}.
	^ answer.
}.

☞ b := 666.

b on: 'toString' do: {
	^ 'Devil'.
}.

b on: 'toBoolean' do: {
	^ False.
}.


Pen write: a, brk.  
Pen write: (90 + a), brk. 
Pen write: b, brk. 
Pen write: (True & b), brk. 

a := Array < 'hello' ; 'world' ; True ; Nil ; 666. 
a := a + ( Array < 1 ).
Pen write: a, brk.
Pen write: ((Map new) put: Nil at: Nil), brk.
Pen write: a sum, brk. 


{
	a on: 'toString' do: { ^ Nil. }.
	a := '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'toNumber' do: { ^ Nil. }.
	a := 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'toBoolean' do: { ^ Nil. }.
	a := True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.





{
	a on: 'toString' do: { ^ False. }.
	a := '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'toNumber' do: { ^ True. }.
	a := 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'toBoolean' do: { ^ 1. }.
	a := True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.





{
	a on: 'toString' do: { ^ 1. }.
	a := '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'toNumber' do: { ^ ''. }.
	a := 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'toBoolean' do: { ^ ''. }.
	a := True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.






{
	a on: 'toString' do: { ^ (Map new). }.
	a := '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'toNumber' do: { ^ (Object new). }.
	a := 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'toBoolean' do: { ^ (Object new). }.
	a := True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

