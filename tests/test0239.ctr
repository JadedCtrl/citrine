'SINGLE_LANGUAGE'.


☞ a := True.



a on: 'string' do: {
	☞ answer := Nil.
	( ⛏ = True ) true: {
		answer := 'Yep'.
	}, else: {
		answer := 'Nope'.
	}.
	↲ answer.
}.

a on: 'number' do: {
	☞ answer := Nil.
	( ⛏ = True ) true: {
		answer := 10.
	}, else: {
		answer := 20.
	}.
	↲ answer.
}.

☞ b := 666.

b on: 'string' do: {
	↲ 'Devil'.
}.

b on: 'boolean' do: {
	↲ False.
}.


✎ write: a, brk.  
✎ write: (90 + a), brk. 
✎ write: b, brk. 
✎ write: (True & b), brk. 

a := List ← 'hello' ; 'world' ; True ; Nil ; 666. 
a := a + ( List ← 1 ).
✎ write: a, brk.
✎ write: ((Map new) put: Nil at: Nil), brk.
✎ write: a sum, brk. 


{
	a on: 'string' do: { ↲ Nil. }.
	a := '' + a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'number' do: { ↲ Nil. }.
	a := 3 * a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'boolean' do: { ↲ Nil. }.
	a := True & a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.





{
	a on: 'string' do: { ↲ False. }.
	a := '' + a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'number' do: { ↲ True. }.
	a := 3 * a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'boolean' do: { ↲ 1. }.
	a := True & a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.





{
	a on: 'string' do: { ↲ 1. }.
	a := '' + a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'number' do: { ↲ ''. }.
	a := 3 * a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'boolean' do: { ↲ ''. }.
	a := True & a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.






{
	a on: 'string' do: { ↲ (Map new). }.
	a := '' + a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.



{
	a on: 'number' do: { ↲ (Object new). }.
	a := 3 * a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.


{
	a on: 'boolean' do: { ↲ (Object new). }.
	a := True & a. 
} catch: { :error
	✎ write: 'Error noted: ' + error, brk.
}, run.

