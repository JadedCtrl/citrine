

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

Pen write: (6 < 5), brk.
Pen write: (2 > 1), brk.
Pen write: (2 <=: 1), brk.
Pen write: (9 >=: 1), brk.
Pen write: (2 odd), brk.
Pen write: (4 even), brk.
Pen write: (-1 pos), brk.
Pen write: (-2 neg), brk.
Pen write: (3 between: 4 and: 5), brk.
Pen write: (3 = 3), brk.
Pen write: (3 !=: 3), brk.
Pen write: 1 boolean, brk.

Program sweep.

usedMemory1 := Program keptAlloc.


Pen write: (6 < 5), brk.
Pen write: (2 > 1), brk.
Pen write: (2 <=: 1), brk.
Pen write: (9 >=: 1), brk.
Pen write: (2 odd), brk.
Pen write: (4 even), brk.
Pen write: (-1 pos), brk.
Pen write: (-2 neg), brk.
Pen write: (3 between: 4 and: 5), brk.
Pen write: (3 = 3), brk.
Pen write: (3 !=: 3), brk.
Pen write: 1 boolean, brk.

Program sweep.
usedMemory2 := Program keptAlloc.


Pen write: (6 < 5), brk.
Pen write: (2 > 1), brk.
Pen write: (2 <=: 1), brk.
Pen write: (9 >=: 1), brk.
Pen write: (2 odd), brk.
Pen write: (4 even), brk.
Pen write: (-1 pos), brk.
Pen write: (-2 neg), brk.
Pen write: (3 between: 4 and: 5), brk.
Pen write: (3 = 3), brk.
Pen write: (3 !=: 3), brk.
Pen write: 1 boolean, brk.

Program sweep.
usedMemory3 := Program keptAlloc.



( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	Pen write: 'No memory leaks here'.
}, false: {
	Pen write: 'Leaking memory...'.
}.
