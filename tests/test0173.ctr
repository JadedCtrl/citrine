'SINGLE_LANGUAGE'.

List on: 'sum' do: {
	☞ total := 0.
	⛏ each: { :index :element
		total add: element.
	}.
	↲ total.
}.

List on: 'product' do: {
	☞ total := 1.
	⛏ each: { :index :element
		total multiply by: element.
	}.
	↲ total.
}.

☞ usedMemory1 := 0.
☞ usedMemory2 := 0.
☞ usedMemory3 := 0.
☞ usedMemory4 := 0.

Program tidiness: 0.

{

☞ a := List ← 'hello' ; 'world' ; True ; Nil ; 666.
a := a + ( List ← 1 ).
✎ write: ( 'sum: ' + ( a sum ) ), stop.
✎ write: ( 'min: ' + ( a minimum ) ), stop.
✎ write: ( 'max: ' + ( a maximum ) ), stop.
✎ write: ( '3rd: ' + ( a ? 2 ) ), stop.
✎ write: ( 'prd: ' + ( a product ) ), stop.
a sort: { :a :b ↲ (b - a). }.
a each: { :i :e ✎ write: ( i ), stop. }.

} run.

Program clean memory.
usedMemory1 := (Program memory ? 0).


{

☞ a := List ← 'hello' ; 'world' ; True ; Nil ; 666.
a := a + ( List ← 1 ).
✎ write: ( 'sum: ' + ( a sum ) ), stop.
✎ write: ( 'min: ' + ( a minimum ) ), stop.
✎ write: ( 'max: ' + ( a maximum ) ), stop.
✎ write: ( '3rd: ' + ( a ? 2 ) ), stop.
✎ write: ( 'prd: ' + ( a product ) ), stop.
a sort: { :a :b ↲ (b - a). }.
a each: { :i :e ✎ write: ( i ), stop. }.

} run.



Program clean memory.
usedMemory2 := (Program memory ? 0).


{

☞ a := List ← 'hello' ; 'world' ; True ; Nil ; 666.
a := a + ( List ← 1 ).
✎ write: ( 'sum: ' + ( a sum ) ), stop.
✎ write: ( 'min: ' + ( a minimum ) ), stop.
✎ write: ( 'max: ' + ( a maximum ) ), stop.
✎ write: ( '3rd: ' + ( a ? 2 ) ), stop.
✎ write: ( 'prd: ' + ( a product ) ), stop.
a sort: { :a :b ↲ (b - a). }.
a each: { :i :e ✎ write: ( i ), stop. }.

} run.



Program clean memory.
usedMemory3 := (Program memory ? 0).

( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) true: {
	✎ write: 'No memory leaks here'.
}, false: {
	✎ write: 'Leaking memory...'.
}.
